--- a/src/rdiff_backup/selection.py
+++ b/src/rdiff_backup/selection.py
@@ -107,9 +107,24 @@ class Select:
         usually self.select_default.  Returns self.iter just for convenience.
         """
         self.rpath.setdata()  # this may have changed since Select init
-        select_iter = self._iterate_rpath(self.rpath, self.select_default)
+        select_iter = self._iterate_rpath(self.rpath)
         return select_iter
 
+    def _select_filename(self, rp):
+        """Evaluate the selection functions using only the filename and return the dominant value: 0, 1, or 2."""
+        scanned = 0  # 0, by default, or 2 if prev sel func scanned rp
+        for sf in self.selection_functions:
+            if not sf.check_filename and not sf.exclude:
+                return 1
+            result = sf(rp)
+            if result == 1:
+                return 1
+            elif result == 0:
+                return scanned
+            elif result == 2:
+                scanned = 2
+        return 1
+
     def select_default(self, rp):
         """Run through the selection functions and return dominant val 0/1/2"""
         scanned = 0  # 0, by default, or 2 if prev sel func scanned rp
@@ -208,12 +223,9 @@ class Select:
             "--include-globbing-filelist": Select.INCLUDE,
         }
 
-    def _iterate_rpath(self, rpath, sel_func):
+    def _iterate_rpath(self, rpath):
         """
         Return iterator yielding rpaths in rpath
-
-        sel_func is the selection function to use on the rpaths.
-        It is usually self.Select.
         """
 
         def error_handler(exc, filename):
@@ -221,7 +233,7 @@ class Select:
                                        exc)
             return None
 
-        def diryield(rpath):
+        def diryield(rp):
             """
             Generate relevant files in directory rpath
 
@@ -229,15 +241,22 @@ class Select:
             generated normally, num == 1 means the rpath is a directory
             and should be included iff something inside is included.
             """
-            for filename in self._listdir_sorted(rpath):
-                new_rpath = robust.check_common_error(
-                    error_handler, rpath.append, (filename, ))
-                if new_rpath and new_rpath.lstat():
-                    s = sel_func(new_rpath)
+            for filename in self._listdir_sorted(rp):
+                # First check if path is excluded by filename to reduce IO calls
+                minimal_rp = rp.new_index_empty(rp.index + (filename,))
+                s = self._select_filename(minimal_rp)
+                if s == 0:
+                    continue
+                # If filename is not excluded, run all selection functions.
+                new_rp = robust.check_common_error(
+                    error_handler, rp.append, (filename,)
+                )
+                if new_rp and new_rp.lstat():
+                    s = self.select_default(new_rp)
                     if s == 1:
-                        yield (new_rpath, 0)
-                    elif s == 2 and new_rpath.isdir():
-                        yield (new_rpath, 1)
+                        yield (new_rp, 0)
+                    elif s == 2 and new_rp.isdir():
+                        yield (new_rp, 1)
 
         yield rpath
         if not rpath.isdir():
@@ -347,6 +366,8 @@ probably isn't what you meant""".format(se=self.selection_functions[-1].name))
 
         selection_function.exclude = something_excluded or inc_default == Select.EXCLUDE
         selection_function.name = "Filelist: " + filelist_name
+        # Exclude this function from _select_filename because it's not idempotent.
+        selection_function.check_filename = False
         return selection_function
 
     def _filelist_read(self, filelist_fp, include, filelist_name):
@@ -471,6 +492,7 @@ probably isn't what you meant""".format(se=self.selection_functions[-1].name))
 
         sel_func.exclude = not include
         sel_func.name = "Match other filesystems"
+        sel_func.check_filename = False
         return sel_func
 
     def _regexp_get_sf(self, regexp_string, include):
@@ -492,6 +514,7 @@ probably isn't what you meant""".format(se=self.selection_functions[-1].name))
 
         sel_func.exclude = not include
         sel_func.name = "Regular expression: %s" % regexp_string
+        sel_func.check_filename = True
         return sel_func
 
     def _presence_get_sf(self, presence_filename, include):
@@ -510,6 +533,7 @@ probably isn't what you meant""".format(se=self.selection_functions[-1].name))
 
         sel_func.exclude = not include
         sel_func.name = "Presence file: %s" % presence_filename
+        sel_func.check_filename = False
         return sel_func
 
     def _gen_get_sf(self, pred, include, name):
@@ -527,6 +551,7 @@ probably isn't what you meant""".format(se=self.selection_functions[-1].name))
 
         sel_func.exclude = not include
         sel_func.name = (include and "include " or "exclude ") + name
+        sel_func.check_filename = False
         return sel_func
 
     def _devfiles_get_sf(self, include):
@@ -556,6 +581,7 @@ probably isn't what you meant""".format(se=self.selection_functions[-1].name))
 
         sel_func.exclude = not include
         sel_func.name = (include and "include" or "exclude") + " special files"
+        sel_func.check_filename = False
         return sel_func
 
     def _size_get_sf(self, sizestr, min_max):
@@ -580,6 +606,7 @@ probably isn't what you meant""".format(se=self.selection_functions[-1].name))
         sel_func.exclude = True  # min/max-file-size are exclusions
         sel_func.name = "%s size %d" % (min_max and "Maximum" or "Minimum",
                                         size)
+        sel_func.check_filename = False
         return sel_func
 
     def _glob_get_sf(self, glob_str, include):
@@ -598,6 +625,7 @@ probably isn't what you meant""".format(se=self.selection_functions[-1].name))
         sel_func.exclude = not include
         sel_func.name = "Command-line %s glob: %s" % \
             (include and "include" or "exclude", glob_str)
+        sel_func.check_filename = True
         return sel_func
 
     def _glob_get_filename_sf(self, filename, include):
@@ -634,6 +662,7 @@ probably isn't what you meant""".format(se=self.selection_functions[-1].name))
             sel_func = exclude_sel_func
         sel_func.exclude = not include
         sel_func.name = "Tuple select %s" % (tuple, )
+        sel_func.check_filename = True
         return sel_func
 
     def _glob_get_normal_sf(self, glob_str, include):