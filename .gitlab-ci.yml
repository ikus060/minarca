variables:
  PIP_EXTRA_INDEX_URL: https://nexus.patrikdufresne.com/repository/pypi/simple
  MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
               -Dorg.slf4j.simpleLogger.showDateTime=true
               -Djava.awt.headless=true
               -Dmaven.repo.local=.m2/repository"

stages:
- prebuild
- build
- test-package
- publish
- deploy
- test-integration

.prebuild:  &prebuild
  image: docker:stable
  stage: prebuild
  script:
  - "export BUILD_PATH=prebuild/${CI_JOB_NAME}"
  - "export TAG=$DOCKER_REGISTRY/pdsl/minarca-build:${CI_JOB_NAME}-$CI_PIPELINE_IID"
  - docker login $DOCKER_REGISTRY -u $DOCKER_USR -p $DOCKER_PWD
  - docker build -t $TAG $BUILD_PATH
  - docker push $TAG

debian10-py3:
  <<: *prebuild

debian9-py2:
  <<: *prebuild

# TODO Split this by python version and OS.
server_test_py27: 
  stage: build
  image: $DOCKER_REGISTRY/pdsl/minarca-build:debian9-py2-$CI_PIPELINE_IID
  script: 
  - cd minarca-server
  - apt-get update && apt-get -qq install libldap2-dev libsasl2-dev rdiff-backup node-less
  - export TOXENV=`tox --listenvs | grep "^py27" | tr '\n' ','`
  - tox --sitepackages
  
server_test_py3: 
  stage: build
  image: $DOCKER_REGISTRY/pdsl/minarca-build:debian10-py3-$CI_PIPELINE_IID
  script: 
  - cd minarca-server
  - apt-get update && apt-get -qq install libldap2-dev libsasl2-dev rdiff-backup node-less
  - export TOXENV=`tox --listenvs | grep "^py3" | tr '\n' ','`
  - tox --sitepackages
  
quota_test_py27: 
  stage: build
  image: $DOCKER_REGISTRY/pdsl/minarca-build:debian9-py2-$CI_PIPELINE_IID
  script:
  - cd minarca-quota-api
  - export TOXENV=`tox --listenvs | grep "^py27" | tr '\n' ','`
  - tox --sitepackages
  
quota_test_py3: 
  stage: build
  image: $DOCKER_REGISTRY/pdsl/minarca-build:debian10-py3-$CI_PIPELINE_IID
  script: 
  - cd minarca-quota-api
  - python3 setup.py build
  - export TOXENV=`tox --listenvs | grep "^py3" | tr '\n' ','`
  - tox --sitepackages

client_sonar:
  stage: build
  allow_failure: true
  image: debian:stretch
  script:
  - cd minarca-client
  - apt-get update && apt-get -qq install icoutils nsis cron gettext maven curl openjdk-8-jdk-headless git
  - rm /etc/java-8-openjdk/accessibility.properties
  # Get version
  - export REVISION="$(curl http://git.patrikdufresne.com/pdsl/maven-scm-version/raw/master/version.sh | bash -)"
  - echo "REVISION=$REVISION"
  # Test
  - mvn -B -Drevision=${REVISION} -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_TOKEN clean verify org.jacoco:jacoco-maven-plugin:prepare-agent clean verify sonar:sonar

client_build:
  stage: build
  image: debian:stretch
  script:
  - cd minarca-client
  # Setup authenticode
  - apt-get update && apt-get -qq install osslsigncode icoutils nsis cron gettext maven curl openjdk-8-jdk-headless git
  - rm /etc/java-8-openjdk/accessibility.properties
  - echo "$AUTHENTICODE_CERT" | tr -d '\r' > /tmp/authenticode-certs.pem
  - echo "$AUTHENTICODE_KEY" | tr -d '\r' > /tmp/authenticode.pem
  # Get version
  - export REVISION="$(curl http://git.patrikdufresne.com/pdsl/maven-scm-version/raw/master/version.sh | bash -)"
  - echo "REVISION=$REVISION"
  - mvn -B -Drevision=${REVISION} -Dsign.certs.path=/tmp/authenticode-certs.pem -Dsign.key.path=/tmp/authenticode.pem -Dsign.passphrase=$AUTHENTICODE_PASSPHRASE  clean install
  # Rename deb
  - "[ -e minarca-installation-package-deb/target/minarca-installation-package-deb_${REVISION}_all.deb ] || mv minarca-installation-package-deb/target/*.deb minarca-installation-package-deb/target/minarca-installation-package-deb_${REVISION}_all.deb"
  - mv minarca-installation-package-deb/target/minarca-installation-package-deb_${REVISION}_all.deb minarca-installation-package-deb/target/minarca-client_${REVISION}_all.deb
  artifacts:
    paths:
    - minarca-client/minarca-installation-package/target/*.exe
    - minarca-client/minarca-installation-package-deb/target/*.deb

client_windows:
  stage: build
  image: ikus060/docker-wine-maven:3-jdk-8
  script:
  - cd minarca-client
  - export REVISION="$(curl http://git.patrikdufresne.com/pdsl/maven-scm-version/raw/master/version.sh | bash -)"
  - echo "REVISION=$REVISION"
  # Start a virtual frame buffer
  - (Xvfb :99 &)
  - export DISPLAY=:99
  # Run unit test only, since the build is not working on windows
  - mvn -B -Drevision=${REVISION} clean verify
  

server_package_deb_stretch:
  stage: build
  image: $DOCKER_REGISTRY/pdsl/minarca-build:debian9-py2-$CI_PIPELINE_IID
  script:
  - apt-get update && apt-get -y install dh-make dh-virtualenv dh-systemd build-essential python-all libldap2-dev libsasl2-dev
  - pip2 install setuptools_scm
  - cd minarca-server
  - export VERSION=$(python setup.py --version)
  - export SETUPTOOLS_SCM_PRETEND_VERSION=$VERSION
  - export RELEASE_DATE="$(date '+%a, %d %b %Y %X') +0000"
  - sed -i "s/%VERSION%/$VERSION/" debian/changelog
  - sed -i "s/%DATE%/$RELEASE_DATE/" debian/changelog
  - DH_VIRTUALENV_INSTALL_ROOT=/opt/ dpkg-buildpackage -us -uc
  - mv minarca-server_$VERSION_amd64.deb minarca-server_$VERSION_amd64_stretch.deb
  artifacts:
    paths:
    - minarca-server_*.deb
    
server_package_deb_buster:
  stage: build
  image: $DOCKER_REGISTRY/pdsl/minarca-build:debian10-py3-$CI_PIPELINE_IID
  script:
  - apt-get update && apt-get -y install dh-make dh-virtualenv dh-systemd build-essential python-all libldap2-dev libsasl2-dev
  - pip3 install setuptools_scm
  - cd minarca-server
  - export VERSION=$(python setup.py --version)
  - export SETUPTOOLS_SCM_PRETEND_VERSION=$VERSION
  - export RELEASE_DATE="$(date '+%a, %d %b %Y %X') +0000"
  - sed -i "s/%VERSION%/$VERSION/" debian/changelog
  - sed -i "s/%DATE%/$RELEASE_DATE/" debian/changelog
  - DH_VIRTUALENV_INSTALL_ROOT=/opt/ dpkg-buildpackage -us -uc
  - mv minarca-server_$VERSION_amd64.deb minarca-server_$VERSION_amd64_buster.deb
  artifacts:
    paths:
    - minarca-server_*.deb

server_test_deb_stretch:
  stage: test-package
  image: debian:stretch
  script: 
  - bash ./tests/install-server-deb.sh ./minarca-server_*_stretch.deb
  
server_test_deb_buster:
  stage: test-package
  image: debian:buster
  script: 
  - bash ./tests/install-server-deb.sh ./minarca-server_*_buster.deb

client_test_deb_stretch:
  stage: test-package
  image: debian:stretch
  before_script: []
  script:
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client/minarca-installation-package-deb/target/*.deb)
  - bash ./tests/install-client-deb.sh

client_test_deb_buster:
  stage: test-package
  image: debian:buster
  before_script: []
  script:
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client/minarca-installation-package-deb/target/*.deb)
  - bash ./tests/install-client-deb.sh

client_test_exe:
  stage: test-package
  image: debian:stretch
  before_script: []
  script:
  - export MINARCA_EXE_FILE=$(ls -1 ./minarca-client/minarca-installation-package/target/*.exe)
  - bash ./tests/install-client-win.sh

server_publish:
  stage: publish
  except:
  - tags
  script:
  # Publish to kalo
  - eval $(ssh-agent -s)
  - echo "$KALO_WWWDATA_PRIVATEKEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - scp -o StrictHostKeyChecking=no ./minarca-server_*.deb www-data@kalo.patrikdufresne.com:/var/www/patrikdufresne/archive/minarca/nightly/

server_promote:
  stage: publish
  only:
  - tags
  script:
  # Setup authentication
  - eval $(ssh-agent -s)
  - echo "$KALO_WWWDATA_PRIVATEKEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  # Publish to kalo
  - export MINARCA_DEB_STRETCH=$(ls -1 minarca-server_*_stretch.deb)
  - scp -o StrictHostKeyChecking=no ./$MINARCA_DEB_STRETCH www-data@kalo.patrikdufresne.com:/var/www/patrikdufresne/archive/minarca/
  - ssh -o StrictHostKeyChecking=no www-data@kalo.patrikdufresne.com ln -fs /var/www/patrikdufresne/archive/minarca/$MINARCA_DEB_STRETCH /var/www/patrikdufresne/archive/minarca/minarca-server_stretch_amd64.deb
  - export MINARCA_DEB_BUSTER=$(ls -1 minarca-server_*_buster.deb)
  - scp -o StrictHostKeyChecking=no ./$MINARCA_DEB_BUSTER www-data@kalo.patrikdufresne.com:/var/www/patrikdufresne/archive/minarca/
  - ssh -o StrictHostKeyChecking=no www-data@kalo.patrikdufresne.com ln -fs /var/www/patrikdufresne/archive/minarca/$MINARCA_DEB_BUSTER /var/www/patrikdufresne/archive/minarca/minarca-server_buster_amd64.deb

client_publish:
  stage: publish
  environment:
    name: dev
    url: http://www.patrikdufresne.com/archive/minarca/nightly/minarca-client-${REVISION}.exe
  script:
  # Setup authentication
  - eval $(ssh-agent -s)
  - echo "$KALO_WWWDATA_PRIVATEKEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  # Publish to kalo
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client/minarca-installation-package-deb/target/*.deb)
  - export MINARCA_EXE_FILE=$(ls -1 ./minarca-client/minarca-installation-package/target/*.exe)
  - scp -o StrictHostKeyChecking=no $MINARCA_DEB_FILE www-data@kalo.patrikdufresne.com:/var/www/patrikdufresne/archive/minarca/nightly/
  - scp -o StrictHostKeyChecking=no $MINARCA_EXE_FILE www-data@kalo.patrikdufresne.com:/var/www/patrikdufresne/archive/minarca/nightly/

client_promote:
  stage: publish
  only:
  - tags
  environment:
    name: latest
    url: http://www.patrikdufresne.com/archive/minarca/minarca-latest-install.exe
  script:
  # Setup authentication
  - eval $(ssh-agent -s)
  - echo "$KALO_WWWDATA_PRIVATEKEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  # Publish to kalo
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client/minarca-installation-package-deb/target/*.deb)
  - export MINARCA_EXE_FILE=$(ls -1 ./minarca-client/minarca-installation-package/target/*.exe)
  - scp -o StrictHostKeyChecking=no $MINARCA_EXE_FILE www-data@kalo.patrikdufresne.com:/var/www/patrikdufresne/archive/minarca/
  - scp -o StrictHostKeyChecking=no $MINARCA_DEB_FILE www-data@kalo.patrikdufresne.com:/var/www/patrikdufresne/archive/minarca/
  - ssh -o StrictHostKeyChecking=no www-data@kalo.patrikdufresne.com ln -fs $(basename $MINARCA_EXE_FILE) /var/www/patrikdufresne/archive/minarca/minarca-latest-install.exe
  - ssh -o StrictHostKeyChecking=no www-data@kalo.patrikdufresne.com ln -fs $(basename $MINARCA_DEB_FILE) /var/www/patrikdufresne/archive/minarca/minarca-client_latest_all.deb

deploy_staging_sestican:
  stage: deploy
  image: ikus060/ansible
  variables:
    ANSIBLE_HOST_KEY_CHECKING: "False"
  environment:
    name: staging
    url: https://test.minarca.net
  before_script:
  - eval $(ssh-agent -s)
  - echo "$GITLAB_SSH_IDENTITY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  script:
  # Delete previous installation
  - ssh -o StrictHostKeyChecking=no root@sestican.patrikdufresne.com "! dpkg -s minarca-server || apt remove -y minarca-server --purge"
  - ssh -o StrictHostKeyChecking=no root@sestican.patrikdufresne.com "rm -Rf /etc/minarca/; rm -Rf /backups/"
  # Install minarca
  - export MINARCA_VERSION=$(cd minarca-server; python ./setup.py --version)
  - echo MINARCA_VERSION=$MINARCA_VERSION
  - git clone "http://${GITLAB_USR}:${GITLAB_PWD}@git.patrikdufresne.com/pdsl/ansible-config.git"
  - cd ansible-config
  - ansible-playbook minarca.yml -i pdsl --extra-vars "ansible_user=root minarca_server_version=$MINARCA_VERSION" --limit sestican
  
deploy_prod_ranculos:
  stage: deploy
  image: ikus060/ansible
  when: manual
  only: 
  - tags
  - master
  variables:
    ANSIBLE_HOST_KEY_CHECKING: "False"
  environment:
    name: prod
    url: https://www.minarca.net
  before_script:
  - eval $(ssh-agent -s)
  - echo "$RANCULOS_ROOT_PRIVATEKEY" | tr -d '\r' | ssh-add - > /dev/null
  - echo "$MERCOR_ROOT_PRIVATEKEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  script:
  - export MINARCA_VERSION=$(cd minarca-server; python ./setup.py --version)
  - echo MINARCA_VERSION=$MINARCA_VERSION
  - git clone "http://${GITLAB_USR}:${GITLAB_PWD}@git.patrikdufresne.com/pdsl/ansible-config.git"
  - cd ansible-config
  - ansible-playbook minarca.yml -i pdsl --extra-vars "ansible_user=root minarca_server_version=$MINARCA_VERSION" --limit ranculos,mercor
  
test_link_debian_stretch:
  image: debian:stretch
  stage: test-integration
  variables:
    MINARCA_REPOSITORYNAME: test-${CI_JOB_ID}
  script: 
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client/minarca-installation-package-deb/target/*.deb)
  - bash ./tests/install-client-deb.sh
  - bash ./tests/link-link-deb-linux.sh
  
test_link_debian_buster:
  image: debian:buster
  stage: test-integration
  variables:
    MINARCA_REPOSITORYNAME: test-${CI_JOB_ID}
  script: 
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client/minarca-installation-package-deb/target/*.deb)
  - bash ./tests/install-client-deb.sh
  - bash ./tests/link-link-deb-linux.sh

# This test is not working and fail because of issue with wine.
#test_link_win:
#  image: debian:buster
#  stage: test-integration
#  variables:
#    MINARCA_REPOSITORYNAME: test-${CI_JOB_ID}
#  allow_failure: true
#  script: 
#  - export MINARCA_EXE_FILE=$(ls -1 ./minarca-client/minarca-installation-package/target/*.exe)
#  - bash ./tests/install-client-win.sh
#  - bash ./tests/link-link-win.sh
  