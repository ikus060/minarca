variables:
  MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
               -Dorg.slf4j.simpleLogger.showDateTime=true
               -Djava.awt.headless=true
               -Dmaven.repo.local=.m2/repository"
  MINARCA_DEV_REMOTE_URL: https://minarca-dev.ikus-soft.com
  MINARCA_DEV_USERNAME: admin
  MINARCA_DEV_PASSWORD: admin123

stages:
- test
- bdist
- doc
- upload
- deploy
- e2e-test

test:flake8:
  before_script:
  - apt update && apt -y --no-install-recommends install $DEPENDS
  - pip install tox
  image: python:3
  parallel:
    matrix:
    - TARGET: minarca-client
      DEPENDS: cron librsync-dev python3-tk libacl1-dev
    - TARGET: minarca-server
      DEPENDS: rdiff-backup
      PIP_EXTRA_INDEX_URL: https://nexus.ikus-soft.com/repository/pypi-group/simple/
    - TARGET: minarca-quota-api
      DEPENDS: bash
  script:
  - cd $TARGET
  - tox -e flake8
  stage: test
  variables:
    DIST: debian11

test:deb:
  artifacts:
    paths:
    - ./*/coverage.xml
    - ./*/xunit.xml
    expire_in: 1 day
  before_script:
  - apt update && apt -y --no-install-recommends install python3-dev python3-pip python3-setuptools $DEPENDS
  - pip3 install tox
  image: buildpack-deps:$DIST
  parallel:
    matrix:
    - TARGET: minarca-client
      DIST: [buster, bullseye, bookworm]
      DEPENDS: cron librsync-dev python3-tk libacl1-dev xvfb xauth
    - TARGET: minarca-server
      DIST: [buster, bullseye, bookworm]
      DEPENDS: rdiff-backup
    - TARGET: minarca-quota-api
      DIST: [buster, bullseye, bookworm]
      DEPENDS: bash
  script:
  - cd $TARGET
  - tox
  stage: test
    
test:win32:
  before_script:
  - choco install python3 --version=3.7.9 -y -f --forcex86 --source "'https://nexus.ikus-soft.com/repository/choco/'"
  - $Env:path += ";C:\Python37\Scripts\;C:\Python37\;"
  - $Env:path
  - python.exe -VV
  - pip.exe install tox
  script:
  - cd minarca-client
  - tox.exe
  stage: test
  tags:
  - windows

test:macos:
  script:
  - cd minarca-client
  - tox
  stage: test
  tags:
  - macos

bdist:deb:
  artifacts:
    paths:
    - "*/dist/*/*_amd64.deb"
    expire_in: 1 day
  image: buildpack-deps:$DIST
  needs: []
  parallel:
    matrix:
    - TARGET: minarca-client
      DIST: [buster, bullseye, bookworm, jammy]
      DEPENDS: python3 cron librsync-dev libacl1-dev
    - TARGET: minarca-server
      DIST: [buster, bullseye, bookworm, jammy]
      DEPENDS: python3
      PIP_EXTRA_INDEX_URL: https://nexus.ikus-soft.com/repository/pypi-group/simple/
      TZ: UTC
    - TARGET: minarca-quota-api
      DIST: [buster, bullseye, bookworm]
      DEPENDS: python3
  script:
  - apt update && apt -y --no-install-recommends install devscripts $DEPENDS
  - cd $TARGET
  - export VERSION=$(curl -L https://gitlab.com/ikus-soft/maven-scm-version/-/raw/master/version.sh 2>/dev/null | bash -s DEB)
  - export RELEASE_DATE="$(date '+%a, %d %b %Y %H:%M:%S') +0000"
  - sed "s/%VERSION%/${VERSION}/" debian/changelog.in | sed "s/%DATE%/${RELEASE_DATE}/" > debian/changelog
  - apt build-dep -y .
  - dpkg-buildpackage -b
  - mkdir -p "./dist/$DIST/"
  - mv ../*.deb "./dist/$DIST/"
  stage: bdist
  variables:
   DH_VERBOSE: "1"
   GIT_DEPTH: "0"

# For Linux, we need to build on a oldest glibc version possible.
# For us, this is Debian buster.
bdist:linux:
  artifacts:
    paths:
    - "minarca-client/dist/minarca-client_*.tar.gz"
    expire_in: 1 day
  before_script:
  - apt update && apt -y --no-install-recommends install librsync-dev libacl1-dev git
  - pip3 install tox
  image: python:3.9-buster
  needs: []  
  script:
  - cd minarca-client
  - tox -e pyinstaller
  stage: bdist

bdist:macos:
  artifacts:
    paths:
    - "minarca-client/dist/minarca-client_*.dmg"
    expire_in: 1 day
  before_script:
    - pip3 install tox
  needs: []  
  tags:
  - macos
  script:
  - cd minarca-client
  - tox -e pyinstaller
  stage: bdist

bdist:win32:
  artifacts:
    paths:
    - "minarca-client/dist/minarca-client_*.exe"
    expire_in: 1 day
  before_script:
  # Install required dependencies for building on Windows
  # python is used for building
  # openssl is required to generate certificate
  # nsis for creating installer
  # osslsigncode to sign binaries
  - choco install python3 --version=3.7.9 -y -f --forcex86 --source "'https://nexus.ikus-soft.com/repository/choco/'"
  - choco install openssl -y --source "'https://nexus.ikus-soft.com/repository/choco/'"
  - choco install nsis -y --source "'https://nexus.ikus-soft.com/repository/choco/'"
  - wget.exe https://github.com/mtrojnar/osslsigncode/releases/download/2.2/osslsigncode_2.2_windows.zip
  - 7z x osslsigncode_2.2_windows.zip -aoa -oC:\osslsigncode
  - $Env:path += ";C:\osslsigncode;C:\Python37\Scripts\;C:\Python37\;C:\Program Files (x86)\kSign\;C:\Program Files\OpenSSL-Win64\bin;C:\Program Files (x86)\NSIS"
  - $Env:path
  # Sanity check
  - python.exe -VV
  - osslsigncode.exe --version
  - openssl.exe version
  - makensis.exe /version
  # Install tox
  - pip.exe install tox
  needs: []  
  script:
  - cd minarca-client
  - tox.exe -e pyinstaller
  stage: bdist
  tags:
  - windows

test-bdist:deb:
  stage: bdist
  image: buildpack-deps:$DIST
  needs: ["bdist:deb"]
  parallel:
    matrix:
    - TARGET: minarca-server
      DIST: [buster, bullseye, bookworm]
    # Ubuntu tzdata is broken https://githubmate.com/repo/regebro/tzlocal/issues/101
    # So we need to make it explicit using environment variable
    - TARGET: minarca-server
      DIST: [jammy]
      TZ: UTC
  script:
  - apt update && apt install -y apt-transport-https ca-certificates lsb-release gpg
  - curl -L https://www.ikus-soft.com/archive/minarca/public.key | gpg --dearmor > /usr/share/keyrings/minarca-keyring.gpg
  - echo "deb [arch=amd64 signed-by=/usr/share/keyrings/minarca-keyring.gpg] https://nexus.ikus-soft.com/repository/apt-release-$(lsb_release -sc)/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/minarca.list
  - apt update && apt install -y ./${TARGET}/dist/$DIST/${TARGET}_*_amd64.deb
  - /opt/minarca-server/bin/minarca-server --version
  - (/opt/minarca-server/bin/minarca-server &)
  - sleep 2
  - curl --fail http://localhost:8080

doc:
  artifacts:
    paths:
    - ./minarca-client/.tox/doc/tmp
    expire_in: 1 day
  before_script:
    - apt update && apt -y --no-install-recommends install librsync-dev python3-tk libacl1-dev
    - pip install tox
  image: python:3.10
  needs: []
  script:
  - cd minarca-client
  - tox -e doc
  stage: doc

upload:deb:
  image: python:3
  needs:
  - bdist:deb
  parallel:
    matrix:
    - TARGET: minarca-client
      DIST: [buster, bullseye, bookworm, jammy]
    - TARGET: minarca-server
      DIST: [buster, bullseye, bookworm, jammy]
      DEPENDS: python3
    - TARGET: minarca-quota-api
      DIST: [buster, bullseye, bookworm]
  script: |
    set -e
    set -x
    if [[ "$CI_COMMIT_TAG" == *.*.? ]]; then
      APT_URL="https://nexus.ikus-soft.com/repository/apt-release-${DIST}/"
    else
      APT_URL="https://nexus.ikus-soft.com/repository/apt-dev-${DIST}/"
    fi
    # Minarca Server
    export FILE=$(ls -1 ./${TARGET}/dist/$DIST/${TARGET}_*_amd64.deb)
    curl --fail -u "$NEXUS_USR:$NEXUS_PWD" -H "Content-Type: multipart/form-data" --data-binary "@$FILE" "$APT_URL"
    sleep 2
    curl --fail ${APT_URL}/dists/$DIST/main/binary-amd64/Packages | grep "$(basename $FILE)"
  stage: upload

.upload-file: &upload-file
  image: python:3
  script: |
    set -x
    set -e
    # publish to nexus
    export VERSION=$(cd minarca-client; python3 setup.py --version)
    export FILE=$(ls -1d $FILENAME)
    cd $(dirname $FILE)
    find $(basename $FILE) -type f -exec curl --fail -u "$NEXUS_USR:$NEXUS_PWD" --upload-file "{}" https://nexus.ikus-soft.com/repository/archive/minarca/$VERSION/{} \;
  stage: upload

upload:get-minarca:
  <<: *upload-file
  needs:
  - bdist:linux
  variables:
    FILENAME: ./get-minarca.sh

upload:linux:
  <<: *upload-file
  needs:
  - bdist:linux
  variables:
    FILENAME: ./minarca-client/dist/minarca-client*.tar.gz
    
upload:macos:
  <<: *upload-file
  needs:
  - bdist:macos
  variables:
    FILENAME: ./minarca-client/dist/minarca-client*.dmg

upload:win32:
  <<: *upload-file
  needs:
  - bdist:win32
  variables:
    FILENAME: ./minarca-client/dist/minarca-client*.exe

upload:doc:
  <<: *upload-file
  before_script:
    - mv ./minarca-client/.tox/doc/tmp/html doc
  needs:
  - doc
  variables:
    FILENAME: doc

upload:sonar:
  allow_failure: true
  stage: upload
  needs:
  - test:deb
  image: sonarsource/sonar-scanner-cli
  only:
    variables:
      - $SONAR_URL
      - $SONAR_TOKEN
  variables:
    SONAR_PROJECT_BASE_DIR: "${CI_PROJECT_DIR}"
  script:
  - sonar-scanner -X -Dsonar.qualitygate.wait=True -Dsonar.python.coverage.reportPaths=*/coverage.xml -Dsonar.python.xunit.reportPath=*/xunit.xml -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.projectVersion=$(git describe) -Dsonar.exclusions=**/test_*.py,**/snippet_*.py


deploy:dev:
  allow_failure: True
  environment:
    name: dev
    url: https://dev.minarca.net
  needs: 
  - bdist:deb
  - upload:deb
  image: registry.gitlab.com/finestructure/pipeline-trigger
  script:
    - apk update && apk add git
    - export DEB_VERSION=$(ls -1 minarca-server/dist/buster/minarca-server_*_amd64.deb | cut -d '_' -f 2)
    - echo DEB_VERSION=$DEB_VERSION
    # Trigger ansible-config pipeline
    - trigger -a "$ANSIBLE_PIPELINE_GITLAB_API_TOKEN" -t master -e "MINARCA_VERSION=$DEB_VERSION" -p 36bae86778d901fc6b2d6453a41844 18716492
  stage: deploy
  variables:
    GIT_STRATEGY: none

e2e-test:deb:
  allow_failure: True
  needs:
  - deploy:dev
  - bdist:deb
  image: buildpack-deps:$DIST
  parallel:
    matrix:
    - TARGET: minarca-client
      DIST: [buster, bullseye, bookworm, jammy]
  script:
    - apt update
    - apt install -y ./minarca-client/dist/$DIST/minarca-client_*_amd64.deb
    # Smoke test
    - minarca --version
    - /opt/minarca/bin/minarcaw --version
    # Check translation
    - LANGUAGE="fr" minarca --help | grep 'démarrer une sauvegarde'
    # Check backup
    - minarca -d link --remoteurl "$MINARCA_DEV_REMOTE_URL" --username "$MINARCA_DEV_USERNAME" --password "$MINARCA_DEV_PASSWORD" --name "e2e-test-${DIST}-${CI_JOB_ID}"
    - minarca -d status
    - minarca -d include /etc /var /home
    - minarca -d backup --force
  stage: e2e-test
  variables:
    GIT_STRATEGY: none

e2e-test:linux:
  allow_failure: True
  needs:
  - deploy:dev
  - bdist:linux
  image: buildpack-deps:buster
  script:
    - apt update && apt install -y cron openssh-client locales locales-all
    - tar -zxvf ./minarca-client/dist/$DIST/minarca-client*.tar.gz --strip 1
    # Smoke test
    - ./minarca --version
    - ./minarcaw --version
    # Check translation
    - LANGUAGE=fr_CA:fr LANG=fr_CA.UTF-8 ./minarca --help | grep 'démarrer une sauvegarde'
    # Check backup
    - ./minarca -d link --remoteurl "$MINARCA_DEV_REMOTE_URL" --username "$MINARCA_DEV_USERNAME" --password "$MINARCA_DEV_PASSWORD" --name "e2e-test-linux-${CI_JOB_ID}"
    - ./minarca -d include /etc /var /home
    - ./minarca -d status
    - ./minarca -d backup --force
  stage: e2e-test
  variables:
    GIT_STRATEGY: none
    LANG: "en_US.UTF-8"

e2e-test:macos:
  allow_failure: True
  needs:
  - deploy:dev
  - bdist:macos
  before_script:
  - rm -Rf /Applications/Minarca.app
  - rm -Rf $HOME/Library/Preferences/Minarca
  script:
  - "[ ! -e /Volumes/Minarca ] || hdiutil detach /Volumes/Minarca"
  - hdiutil attach minarca-client/dist/minarca-client_*.dmg 
  - cp -r /Volumes/Minarca/Minarca.app /Applications/
  # Smoke test
  - /Applications/Minarca.app/Contents/MacOS/minarca --version
  - /Applications/Minarca.app/Contents/MacOS/minarcaw --version
  # Check translation
  - defaults write -g AppleLocale fr_CA
  - /Applications/Minarca.app/Contents/MacOS/minarca --help | grep 'démarrer une sauvegarde'
  - defaults write -g AppleLocale en_CA
  # Check backup
  - /Applications/Minarca.app/Contents/MacOS/minarca -d link --remoteurl "$MINARCA_DEV_REMOTE_URL" --username "$MINARCA_DEV_USERNAME" --password "$MINARCA_DEV_PASSWORD" --name "e2e-test-macos-${CI_JOB_ID}"
  - /Applications/Minarca.app/Contents/MacOS/minarca -d include "$HOME/Documents"
  - /Applications/Minarca.app/Contents/MacOS/minarca -d status
  - /Applications/Minarca.app/Contents/MacOS/minarca -d backup --force
  stage: e2e-test
  tags:
  - macos
  variables:
    LC_ALL: "en_US.UTF-8"

e2e-test:win32:
  allow_failure: True
  needs:
  - deploy:dev
  - bdist:win32
  script:
  # Install minarca
  - $file=Get-ChildItem minarca-client/dist/minarca-client_*.exe
  - Start-Process -wait "$file" /S
  - dir "C:\Program Files\Minarca"
  - $Env:path += ";C:\Program Files\Minarca"
  - $Env:path
  # Smoke test
  - minarca.exe --version
  - minarcaw.exe --version
  # Check translation
  - $Env:LANGUAGE="fr"; if (!(minarca.exe --help | Select-String -quiet 'sauvegarde')){ exit 1 }
  - $Env:LANGUAGE="en"
  # Check backup
  - minarca.exe -d link --force --remoteurl "$MINARCA_DEV_REMOTE_URL" --username "$MINARCA_DEV_USERNAME" --password "$MINARCA_DEV_PASSWORD" --name "e2e-test-win32-${CI_JOB_ID}"
  - minarca.exe -d include /etc /var /home
  - minarca.exe -d status
  - minarca.exe -d backup --force
  stage: e2e-test
  tags:
  - windows
  variables:
    GIT_STRATEGY: none
